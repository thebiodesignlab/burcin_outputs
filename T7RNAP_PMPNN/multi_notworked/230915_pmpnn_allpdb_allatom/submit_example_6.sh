#!/bin/bash
#SBATCH -p gpu
#SBATCH --job-name=allapdb
#SBATCH --mem=32g
#SBATCH --gres=gpu:1
#SBATCH -c 3
#SBATCH --output=allapdb.out
#SBATCH --time=4-0:0:0
#SBATCH --mail-user=brcnacar@gmail.com
#SBATCH --mail-type=BEGIN,END

ml Anaconda3/2023.03
conda init bash
source ~/.bashrc
conda activate proteinmpnn

folder_with_pdbs="tempdb"

output_dir="outputs"

if [ ! -d $output_dir ]
then
    mkdir -p $output_dir
fi


path_for_parsed_chains=$output_dir"/parsed_pdbs.jsonl"
path_for_tied_positions=$output_dir"/tied_pdbs.jsonl"
path_for_fixed_positions=$output_dir"/fixed_pdbs.jsonl"
path_for_assigned_chains=$output_dir"/assigned_pdbs.jsonl"
chains_to_design="A B C D E F G H I"
fixed_positions

python $pmpnn/helper_scripts/parse_multiple_chains.py --input_path=$folder_with_pdbs --output_path=$path_for_parsed_chains

python $pmpnn/helper_scripts/assign_fixed_chains.py --input_path=$path_for_parsed_chains --output_path=$path_for_assigned_chains --chain_list "$chains_to_design"
python $pmpnn/helper_scripts/make_fixed_positions_dict.py --input_path=$path_for_parsed_chains --output_path=$path_for_fixed_positions --chain_list "$chains_to_design" --position_list "$fixed_positions"

python $pmpnn/helper_scripts/make_pos_neg_tied_positions_dict.py --input_path=$path_for_parsed_chains --output_path=$path_for_tied_positions --homooligomer 1 --pos_neg_chain_list="A B C D E F G H I" --pos_neg_chain_betas "1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0"

python $pmpnn/protein_mpnn_run.py \
        --jsonl_path $path_for_parsed_chains \
        --chain_id_jsonl $path_for_assigned_chains \
	--fixed_positions_jsonl $path_for_fixed_positions \
	--tied_positions_jsonl $path_for_tied_positions \
        --out_folder $output_dir \
        --num_seq_per_target 1000 \
        --sampling_temp "0.3" \
	--save_probs 1 \
        --seed 37 --save_score 1 \
        --batch_size 1 \
